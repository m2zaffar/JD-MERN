
---------------GIVEN TASKS---------------

https://jsonplaceholder.typicode.com/users —> burda array verilib. Onu isledeceyik. 

#task1.  map funksiyasi ile sadece bu obyektin id, username ve email-inden ibaret obyektlerden 
teskil olunmus  yeni bir array yaradin: mes: 
[  {id:1, username: 'Bret', email: "incere@april.biz"   ]

——————————————————————————————

#task2. document.write methodu ile yuxaridaki arrayda olan userlerin username-lerini ve email-lerini ve 
islediyi shirketin adini ekrana yazdirin.  Break tagindan istifade edin (yeni setire kecmek ucun). 
Meselen:
Username  Bret
Email incere@april.biz
Company Name Romaguera-Crona

Siz document.write ('<p class="classAdlariBurdaVerilir"> some text </p>) kimi de istifade ede bilersiniz.
Ona gore sevinerem ki, h1 ve s. taglardan ve ya class-lardan da istifade edesiniz. Arrayi loop (dovr) 
etmek lazimdir. Calisin, forEach methodu ile edin. 

———————————————————————————————
#task3.Bir funksiya yazin ki, yuxaridaki arraydan userin adini verim mene hemin obyekti geri qaytarsin.
Meselen:
getUserName("Leanne Graham")

.find methodu ile yaza bilersiniz.


-----------JS-9-OPTIONAL-TASKS----------

Exercise (1)

→ Let’s try 5 array operations:
→ Create an array styles with items “Jazz” and “Blues”
→ Append “Rock-n-Roll” to the end
→ Replace the value in the middle by “Classics”
    → Your code for finding the middle value should work for any arrays with odd length
→ Strip off the first value of the array and show it
→ Prepend Rap and Reggae to the array

→ The array in the process:
Jazz, Blues
Jazz, Bues, Rock-n-Roll
Jazz, Classics, Rock-n-Roll
Classics, Rock-n-Roll
Rap, Reggae, Classics, Rock-n-Roll


Exercise (2)

→ Write a function sumInput() that:
  → Asks the user for values using prompt and stores the values in the array
  → Finishes asking when the user enters a non-numeric value, an empty string, or
    presses “Cancel”
  → Calculates and returns the sum of array items


Exercise (3)

→ The input is an array of numbers, e.g. arr = [-2, -3, 4, -1, -2, 1, 5, -3]
→ Your task is to find the contiguous subarray of arr with the maximal sum of numbers [4-5]
→ Write the function getMaxSubSu(arr) that will find and return that sum 

4+(-1)+(-2)+1+5=7



Exercise (4)

→ Write the function sortByName(users) that gets an array of objects with property
name and sorts it

→ For instance:
let john = { name: "John", age: 25 };
let adam = { name: "Adam", age: 30 };
let mary = { name: "Mary", age: 28 };
let arr = [john, adam, mary];
sortByName(arr);
// now: [adam, john, mary]
alert(arr[1].name); // John


Exercise (5)

→ Let arr be an array
→ Create a function unique(arr) that should return an array with unique items of arr

→ For instance:
function unique(arr) {
/* your code */
}
let values = ["John", "Harry", "Mary", "Harry", "Beth", "Harry", "Mary", "John"];
alert(unique(values)); // John, Harry, Mary, Beth

Exercise (6)

→ You have an array of user objects, each one has name, surname and id
→ Write the code to create another array from it, of objects with id and fullName,
where fullName is generated from name and surname

→ For instance:
let john = { name: "John", surname: "Smith", id: 1 };
let pete = { name: "Pete", surname: "Hunt", id: 2 };
let mary = { name: "Mary", surname: "Key", id: 3 };
let users = [john, pete, mary];
let usersMapped = /* ... your code ... */
alert(usersMapped[0].id) // 1
alert(usersMapped[0].fullName) // John Smith


Exercise (7)

→ Let arr be an array
→ Create a function unique(arr) that should return an array with unique items of arr
→ Use set to make the function more efficient

→ For instance:
function unique(arr) {
/* your code */
}
let values = ["John", "Harry", "Mary", "Harry", "Beth", "Harry", "Mary", "John"];
alert(unique(values)); // John, Harry, Mary, Beth


Exercise (8)

→ Write a function subArrayZero(arr) that gets an array and returns whether it contains
  a contiguous subarray whose sum is equal to 0
    → Your function should go over the array elements only once

function subArrayZero(arr) {
// your code
}
alert(subArrayZero([-5, 12, 4, -7, 2, 1, 8])); // true, 4 + (-7) + 2 + 1 = 0
alert(subArrayZero([3, -2, -6, 2, 1, -2])); // false


Exercise (9)

→ Create a function countWords(sentence) that gets a sentence and prints to the
console the number of occurrences of each word in the sentence
→ For instance:
function countWords(sentence) {
// your code
}
let sentence = "John the second is the son of John the
first, while the second son of John the second is William
the second.";
countWords(sentence);

Exercise (10)

→ Anagrams are words that have the same number of same letters, but in different order
→ For instance:
  → nap - pan
  → ear - are - era
  → cheaters - hectares – teachers
→ Write a function aclean(arr) that returns an array cleaned from anagrams
→ For instance:
let arr = ["nap", "teachers", "cheaters", "PAN", "ear", "era", "hectares"];
alert(aclean(arr)); // "nap,teachers,ear" or "PAN,cheaters,era"

→ From every anagram group should remain only one word, no matter
which one


